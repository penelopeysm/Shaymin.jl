name: "failure 2"

on:
  push:
    branches:
      - main
  workflow_dispatch:

# needed to allow julia-actions/cache to delete old caches that it has created
permissions:
  actions: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'
          arch: 'x86'

      - uses: julia-actions/cache@v2
        if: always()

      - run: |
          using Pkg
          Pkg.add(url="https://github.com/TuringLang/Turing.jl", rev="ch")
          Pkg.add(name="Mooncake", version="0.4.10")
          Pkg.add(name="StatsFuns", version="1.3.2")

          using Turing
          import Mooncake
          using LinearAlgebra: dot
          using StatsFuns: logistic

          adbackend = Turing.AutoMooncake(config = nothing)

          function nn(x, b1, w11, w12, w13, bo, wo)
              h = tanh.([w11 w12 w13]' * x .+ b1)
              return logistic(dot(wo, h) + bo)
          end

          # Generating training data
          N = 20
          M = N รท 4
          x1s = rand(M) * 5
          x2s = rand(M) * 5
          xt1s = Array([[x1s[i]; x2s[i]] for i = 1:M])
          append!(xt1s, Array([[x1s[i] - 6; x2s[i] - 6] for i = 1:M]))
          xt0s = Array([[x1s[i]; x2s[i] - 6] for i = 1:M])
          append!(xt0s, Array([[x1s[i] - 6; x2s[i]] for i = 1:M]))

          xs = [xt1s; xt0s]
          ts = [ones(M); ones(M); zeros(M); zeros(M)]

          # Define model

          alpha = 0.16                  # regularizatin term
          var_prior = sqrt(1.0 / alpha) # variance of the Gaussian prior

          @model function bnn(ts)
              b1 ~ MvNormal([0. ;0.; 0.],
                  [var_prior 0. 0.; 0. var_prior 0.; 0. 0. var_prior])
              w11 ~ MvNormal([0.; 0.], [var_prior 0.; 0. var_prior])
              w12 ~ MvNormal([0.; 0.], [var_prior 0.; 0. var_prior])
              w13 ~ MvNormal([0.; 0.], [var_prior 0.; 0. var_prior])
              bo ~ Normal(0, var_prior)

              wo ~ MvNormal([0.; 0; 0],
                  [var_prior 0. 0.; 0. var_prior 0.; 0. 0. var_prior])
              for i = rand(1:N, 10)
                  y = nn(xs[i], b1, w11, w12, w13, bo, wo)
                  ts[i] ~ Bernoulli(y)
              end
              b1, w11, w12, w13, bo, wo
          end

          # Sampling
          chain = sample(bnn(ts), HMC(0.1, 5; adtype=adbackend), 10)
        shell: julia --color=yes {0}
